// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/KeyVerifier.gold"
import gold.structures.automaton.*;
import gold.structures.list.*;
import gold.structures.set.*;
import gold.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class KeyVerifier {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static GAdaptorSet Q=null;
  static {
    int $line=0;
    $line=18;
    $try:try {
      Q=$defaultValue(GAdaptorSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GLinkedHashTableSet \u03A3=null;
  static {
    int $line=0;
    $line=19;
    $try:try {
      \u03A3=$defaultValue(GLinkedHashTableSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GAdaptorList q=null;
  static {
    int $line=0;
    $line=20;
    $try:try {
      q=$defaultValue(GAdaptorList.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GAdaptorSet F=null;
  static {
    int $line=0;
    $line=21;
    $try:try {
      F=$defaultValue(GAdaptorSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static Integer minlength=null;
  static {
    int $line=0;
    $line=23;
    $try:try {
      minlength=$defaultValue(Integer.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static Integer maxlength=null;
  static {
    int $line=0;
    $line=24;
    $try:try {
      maxlength=$defaultValue(Integer.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GAdaptorSet Mins=null;
  static {
    int $line=0;
    $line=25;
    $try:try {
      Mins=$defaultValue(GAdaptorSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GAdaptorSet Mays=null;
  static {
    int $line=0;
    $line=26;
    $try:try {
      Mays=$defaultValue(GAdaptorSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static GAdaptorSet Symb=null;
  static {
    int $line=0;
    $line=27;
    $try:try {
      Symb=$defaultValue(GAdaptorSet.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static Character errstate=null;
  static {
    int $line=0;
    $line=28;
    $try:try {
      errstate=$defaultValue(Character.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,null,$line);
    }
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=35;
      minlength=$cast(Integer.class,$fix(5));
      $line=36;
      maxlength=$cast(Integer.class,$fix(6));
      $line=37;
      Mins=$cast(GAdaptorSet.class,$fix($opIntvlY('a','e')));
      $line=38;
      Mays=$cast(GAdaptorSet.class,$fix($opIntvlY('A','Z')));
      $line=39;
      Symb=$cast(GAdaptorSet.class,$fix(GCollections.asSet('*','/',';','#','%')));
      $line=40;
      errstate=$cast(Character.class,$fix('E'));
      $line=43;
      \u03A3=$cast(GLinkedHashTableSet.class,$fix($opUnionY($opUnionY(Mins,Mays),Symb)));
      $line=67;
      Q=$cast(GAdaptorSet.class,$fix($opUnionY($opCartsY(new Object[]{GCollections.asSet(0,1),GCollections.asSet(0,1),KeyVerifier.getAllCombinations($cast(gold.structures.set.GAdaptorSet.class,Mins)),$opIntvlY(0,maxlength)}),GCollections.asSet('E'))));
      $line=76;
      q=$cast(GAdaptorList.class,$fix(GCollections.asList(0,0,GCollections.emptySet(),0)));
      $line=84;
      F=$cast(GAdaptorSet.class,$fix($opCartsY(new Object[]{GCollections.asSet(1),GCollections.asSet(1),KeyVerifier.getAllCombinations($cast(gold.structures.set.GAdaptorSet.class,Mins)),$opIntvlY(minlength,maxlength)})));
      $line=93;
      GDeterministicAutomaton A=$cast(GDeterministicAutomaton.class,$fix($invokeConstructor(GDeterministicAutomaton.class,new Object[]{Q,\u03A3,q,F,new GMethod(KeyVerifier.class,"\u03B4")})));
      $line=95;
      System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY($opAdditY("Automata loaded with ",$opAbsolY(Q))," states and "),$opAbsolY(\u03A3))," terminals.\n")}));
      $line=97;
      KeyVerifier.testFromConsole($cast(gold.structures.automaton.GDeterministicAutomaton.class,A));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,"main",$line);
    }
  }
  public static Object \u03B4(Object s, Object t) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=109;
      if ($opEqualY(s,errstate)) {
        $line=109;
        $result=errstate;
        if (true) break $try;
      }
      $line=111;
      Object hassymbol=$fix($getArrayValue(s,new Object[]{0}));
      $line=113;
      Object hasupper=$fix($getArrayValue(s,new Object[]{1}));
      $line=115;
      Object minsin=$fix($getArrayValue(s,new Object[]{2}));
      $line=117;
      Object n=$fix($getArrayValue(s,new Object[]{3}));
      $line=123;
      if ((($bool(($bool($opEqualY(hassymbol,1))&&$bool($opMembrY(t,Symb))))||$bool($opEqualY(n,maxlength)))||$bool($opMembrY(t,minsin)))) {
        $line=126;
        $result=errstate;
        if (true) break $try;
      }
      $line=132;
      $result=GCollections.asList((($bool($opMembrY(t,Symb)))?(1):(hassymbol)),(($bool($opMembrY(t,Mays)))?(1):(hasupper)),(($bool($opMembrY(t,Mins)))?($opUnionY(minsin,GCollections.asSet(t))):(minsin)),$opAdditY(n,1));
      if (true) break $try;
      $line=139;
      $rethrow(new RuntimeException("The function \"\u03B4(s:Object,t:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,"\u03B4",$line);
    }
    return $result;
  }
  public static GAdaptorSet getAllCombinations(GAdaptorSet megaset) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=143;
      GAdaptorSet combs=$cast(GAdaptorSet.class,$fix(GCollections.emptySet()));
      $line=144;
      Object i=$fix(0);
      $line=145;
      while (true) {
        if (!($opLessqY(i,$opAbsolY(megaset)))) break;
        $line=146;
        combs=$cast(GAdaptorSet.class,$fix($opUnionY(combs,KeyVerifier.getCombinationsOrderR($cast(gold.structures.set.GAdaptorSet.class,megaset),$cast(java.lang.Integer.class,i)))));
        $line=147;
        i=$fix($opAdditY(i,1));
      }
      $line=149;
      $result=combs;
      if (true) break $try;
      $line=150;
      $rethrow(new RuntimeException("The function \"getAllCombinations(megaset:GAdaptorSet)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,"getAllCombinations",$line);
    }
    return $cast(GAdaptorSet.class,$result);
  }
  public static GAdaptorSet getCombinationsOrderR(GAdaptorSet set, Integer r) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=154;
      GAdaptorSet ret=$cast(GAdaptorSet.class,$fix(GCollections.emptySet()));
      $line=155;
      if ($opEqualY(r,0)) {
        $line=156;
        ret=$cast(GAdaptorSet.class,$fix(GCollections.asSet(GCollections.emptySet())));
      }
      else {
        $line=157;
        if ($opEqualY(r,1)) {
          $line=158;
          gold.structures.set.ISet $v1=$newSet();
          $v2:for (Object i:GCollections.unmodifiableCollection(set)) {
            $v1.add(GCollections.asSet(i));
          }
          ret=$cast(GAdaptorSet.class,$fix($v1));
        }
        else {
          $line=160;
          GAdaptorSet prev=$cast(GAdaptorSet.class,$fix(KeyVerifier.getCombinationsOrderR($cast(gold.structures.set.GAdaptorSet.class,set),$cast(java.lang.Integer.class,$opSubtrY(r,1)))));
          $line=161;
          Object i=$fix(0);
          $line=162;
          while (true) {
            if (!($opLesstY(i,$opAbsolY(prev)))) break;
            $line=163;
            Object x=$fix($getArrayValue(prev,new Object[]{i}));
            $line=164;
            Object y=$fix($opDiffeY(set,x));
            $line=165;
            gold.structures.set.ISet $v3=$newSet();
            $v4:for (Object j:GCollections.unmodifiableCollection(y)) {
              $v3.add($opUnionY(x,GCollections.asSet(j)));
            }
            ret=$cast(GAdaptorSet.class,$fix($opUnionY(ret,$v3)));
            $line=166;
            i=$fix($opAdditY(i,1));
          }
        }
      }
      $line=169;
      $result=ret;
      if (true) break $try;
      $line=170;
      $rethrow(new RuntimeException("The function \"getCombinationsOrderR(set:GAdaptorSet,r:Integer)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,"getCombinationsOrderR",$line);
    }
    return $cast(GAdaptorSet.class,$result);
  }
  public static Object testFromConsole(GDeterministicAutomaton A) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=174;
      Object teclado=$fix($invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)}));
      $line=175;
      String input=$cast(String.class,$fix(""));
      $line=177;
      System.out.println($message(new Object[]{"Welcome"}));
      $line=178;
      while (true) {
        if (!($bool(true))) break;
        $line=179;
        Boolean err=$cast(Boolean.class,$fix(false));
        $line=180;
        System.out.println($message(new Object[]{"Input word ('EXIT...' to stop):"}));
        $line=181;
        input=$cast(String.class,$fix(((java.util.Scanner)teclado).nextLine()));
        $line=182;
        if ($opEqualY(input,"EXIT...")) {
          $line=182;
          break;
        }
        $line=184;
        Integer i=$cast(Integer.class,$fix(0));
        $line=185;
        while (true) {
          if (!($opLesstY(i,$opAbsolY(input)))) break;
          $line=186;
          if (!$opMembrY($getArrayValue(input,new Object[]{i}),\u03A3)) {
            $line=187;
            System.out.println($message(new Object[]{$opAdditY($opAdditY("\tERROR: character '",$getArrayValue(input,new Object[]{i})),"' is not a symbol of the alphabet.\n")}));
            $line=188;
            err=$cast(Boolean.class,$fix(true));
            $line=189;
            break;
          }
          $line=191;
          i=$cast(Integer.class,$fix($opAdditY(i,1)));
        }
        $line=194;
        if (!$bool(err)) {
          $line=195;
          Boolean valid=$cast(Boolean.class,$fix(((gold.structures.automaton.GDeterministicAutomaton)A).acceptsString($cast(java.lang.String.class,input))));
          $line=196;
          System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY($opAdditY("\tthe input '",input),"' was "),(($bool(valid))?("accepted"):("rejected"))),".")}));
          $line=197;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("\t",(($bool(valid))?("Valid"):("Not Valid")))," input.\n")}));
        }
      }
      $line=200;
      System.out.println($message(new Object[]{"Goodbye"}));
      $line=201;
      $result=null;
      if (true) break $try;
      $line=202;
      $rethrow(new RuntimeException("The function \"testFromConsole(A:GDeterministicAutomaton)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,KeyVerifier.class,"testFromConsole",$line);
    }
    return $result;
  }
}
