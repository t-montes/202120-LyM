using gold.structures.automaton.*
using gold.visualization.automaton.*
using gold.structures.set.*

/* Símbolos asociados a cada token:
 * 
 * 	GRACE		LEXER
 * 
 * 	def			a  
 * 	:=			b
 *	 =			c
 * 	->			d
 *	 ..			e
 * 	+			f
 * 	-			g
 * 	*			h
 * 	/			i
 * 	>			j
 * 	<			k
 * 	<=			l
 * 	>=			m
 * 	!			n
 * 	||			o
 * 	&&			p
 * 	if			q
 * 	then		r
 * 	else			s
 * 	for			t
 * 	do			u
 * 	while		v
 * 	print		w
 * 	true			x
 * 	false		y
 * 	;			;
 * 	(			(
 * 	)			)
 * 	{			{
 * 	}			}
 * 	(espacio)	(espacio)
 * 	10 5 3		C
 * 	variable i n 	V
 * 	
 * Si el lexer no reconoce el token como alguno de los anteriores imprimirá error:
 * 	
 * 	(error)		E
 * 
 */

var tokensK:GAdaptorSet
var tokensV:GAdaptorSet

var reserved 
var expectchars
var finalchars

procedure main(args:String[]) begin
	
	tokensK = {"def",":=","=","->","..","+","-","*","/",">","<","<=",">=","!","||","&&","if","then",
				"else","for","do","while","print","true","false",";","(",")","{","}"," "}
	tokensV = ('a'‥'y')∪{';','(',')','{','}',' '}
	
	reserved = {"def","if","then","else","for","do","while","print","true","false"}	
	expectchars = {":",".","-","<",">","|","&"}
	finalchars = {'=','+','*','/','!',';','(',')','{','}',' '}
	
	Q := {"READ","ERROR","C","V"}∪expectchars∪allChars(reserved)
	Σ := ('a'‥'z')∪('0'‥'9')∪{' ',':','=','.','+','-','*','/','>','<','!','|','&',';','(',')','{','}'}
	Γ := tokensV∪{'C','V','E'}
	q := "READ"
	F := {"READ","C","V"}∪reserved
	
	/* NOTA IMPORTANTE:
	* Para que el Lexer funcione correctamente, en el input que se le de, cada token debe estar separado por 
	* almenos 1 espacio; de lo contrario el lexer puede llegar a omitir algún token.
	* 
	* Esto se debe a que las variables y las constantes numéricas pueden tener cualquier cantidad de letras/números y solo 
	* se sabrá que ha terminado hasta que se encuentre con otro token como el espacio (token que se utiliza como separador).
	* 
	* De este modo por ejemplo, un input que sería:
	* 		if true &&(i>5) {print i*3; print a;}
	* 
	* Se debe enviar al Lexer (para que funcione correctamente) de la forma:
	* 		if true && ( i > 5 ) { print i * 3 ; print a ; }
	*/
	
	A := GDeterministicTransducer(Q, Σ, Γ, q, F, δ, g, h)
	
	print "Automata loaded with "+|Q|+" states and "+|Σ|+" terminals.\n"
	
	GAutomataFrame.show(A)
end

function δ(q:String, σ:char) begin
	f := "READ"
	if (q = "ERROR") and (σ = ' ') then return "READ" end	
	if q = "READ" then
		if (σ ∈ firstChars(expectchars)) or (σ ∈ firstChars(reserved)) then
			f = σ+""
		elseif σ ∈ finalchars then
			f = "READ"
		elseif σ ∈ ('0'‥'9') then
			f = "C"
		else
			f = "V"
		end
	elseif (q = "ERROR") then
		if σ ≠ ' ' then
			f = "ERROR"
		end
	elseif (q = "C") then
		if σ ∈ ('0'‥'9') then
			f = "C"
		end
	elseif (q = "V") then
		if σ ∈ ('a'‥'z') then
			f = "V"
		elseif σ = ' ' then
			f = "READ"
		end
	elseif (q ∈ expectchars) then
		switch q begin
			case ":":
				if σ ∉ {' ','='} then
					f = "ERROR"
				end
			case ".":
				if σ ∉ {' ','.'} then
					f = "ERROR"
				end
			case "-":
				if σ ∉ {' ','>'} then
					f = "ERROR"
				end
			case "<":
				if σ ∉ {' ','='} then
					f = "ERROR"
				end
			case ">":
				if σ ∉ {' ','='} then
					f = "ERROR"
				end
			case "|":
				if σ ∉ {' ','|'} then
					f = "ERROR"
				end
			case "&":
				if σ ∉ {' ','&'} then
					f = "ERROR"
				end
		end
	else
		if q ∉ reserved then
			if (q+σ) ∈ allChars(reserved) then
				f = q+σ
			elseif σ ∈ ('a'‥'z') then
				f = "V"
			elseif σ = ' ' then
				f = "READ"
			else
				f = "ERROR"
			end
		elseif σ ≠ ' ' then
			if σ ∈ ('a'‥'z') then
				f = "V"
			else
				f = "ERROR"
			end			
		end
	end
	return f
end
	
function g(q) begin
	//Es un transducer de Mealy
	return λ
end


function h(q:String, σ:char) begin
	f := ' '
	if q = "READ" then
		if σ ∈ finalchars then
			f = tokenOf(σ)
		end
		//print "Output: (q,s,f)=("+q+","+σ+","+f+")"
	elseif (q = "ERROR") and (σ = ' ') then 
		f = 'E'
	elseif (q = "C") and (σ ∉ ('0'‥'9')) then
		f = 'C'
	elseif (q = "V") and (σ ∉ ('a'‥'z')) then
		f = 'V'
	elseif (q ∈ expectchars) then
		if (σ = ' ') and (q ∉ {"-","<",">"}) then
			f = 'E'
		else
			switch q begin
				case ":":
					if σ = '=' then
						f = tokenOf(":=")
					end
				case ".":
					if σ = '.' then
						f = tokenOf("..")	
					end
				case "-":
					if σ = ' ' then
						f = tokenOf("-")
					elseif σ = '>' then
						f = tokenOf("->")
					end
				case "<":
					if σ = ' ' then
						f = tokenOf("<")
					elseif σ = '=' then
						f = tokenOf("<=")
					end
				case ">":
					if σ = ' ' then
						f = tokenOf(">")
					elseif σ = '=' then
						f = tokenOf(">=")
					end
				case "|":
					if σ = '|' then
						f = tokenOf("||")
					end
				case "&":
					if σ = '&' then
						f = tokenOf("&&")
					end
			end
			//print "Output: (q,s,f)=("+q+","+σ+","+f+")"
		end
	else
		if σ = ' ' then
			if q ∈ reserved then
				f = tokenOf(q)
			else
				f = 'V'
			end
		end
	end
	return f
end


function tokenOf(σ) begin
	i := 0
	while i<|tokensK| do
		if tokensK[i]=(σ+"") then
			return tokensV[i]
		end
		i=i+1
	end
end

function firstChars(wordlist) begin
	return {word[0]|word∈wordlist}
end

function allChars(wordlist) begin
	set := {}
	for each word:String in wordlist do
		for each i:int in (1‥(word.length())) do
			set = set∪{word.substring(0,i)}
		end
	end
	return set
end

